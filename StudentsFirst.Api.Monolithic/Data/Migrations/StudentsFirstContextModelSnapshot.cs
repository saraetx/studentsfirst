// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudentsFirst.Api.Monolithic.Infrastructure;

namespace StudentsFirst.Api.Monolithic.Data.Migrations
{
    [DbContext(typeof(StudentsFirstContext))]
    partial class StudentsFirstContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("StudentsFirst.Common.Models.Assignment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowsOverdueCompletions")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DueAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("StudentsFirst.Common.Models.AssignmentAttachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssignmentSubmissionId")
                        .HasColumnType("text");

                    b.Property<string>("DownloadUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubmissionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentSubmissionId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("AssignmentAttachment");
                });

            modelBuilder.Entity("StudentsFirst.Common.Models.AssignmentResource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AssignmentId1")
                        .HasColumnType("text");

                    b.Property<string>("DownloadUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("AssignmentId1");

                    b.ToTable("AssignmentResource");
                });

            modelBuilder.Entity("StudentsFirst.Common.Models.AssignmentSubmission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssigneeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AssignmentId1")
                        .HasColumnType("text");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("AssignmentId1");

                    b.ToTable("AssignmentSubmission");
                });

            modelBuilder.Entity("StudentsFirst.Common.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("StudentsFirst.Common.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StudentsFirst.Common.Models.UserGroupMembership", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroupMemberships");
                });

            modelBuilder.Entity("StudentsFirst.Common.Models.AssignmentAttachment", b =>
                {
                    b.HasOne("StudentsFirst.Common.Models.AssignmentSubmission", null)
                        .WithMany("Attachments")
                        .HasForeignKey("AssignmentSubmissionId");

                    b.HasOne("StudentsFirst.Common.Models.AssignmentSubmission", null)
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentsFirst.Common.Models.AssignmentResource", b =>
                {
                    b.HasOne("StudentsFirst.Common.Models.Assignment", null)
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentsFirst.Common.Models.Assignment", null)
                        .WithMany("Resources")
                        .HasForeignKey("AssignmentId1");
                });

            modelBuilder.Entity("StudentsFirst.Common.Models.AssignmentSubmission", b =>
                {
                    b.HasOne("StudentsFirst.Common.Models.User", null)
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentsFirst.Common.Models.Assignment", null)
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentsFirst.Common.Models.Assignment", null)
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId1");
                });

            modelBuilder.Entity("StudentsFirst.Common.Models.UserGroupMembership", b =>
                {
                    b.HasOne("StudentsFirst.Common.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentsFirst.Common.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentsFirst.Common.Models.Assignment", b =>
                {
                    b.Navigation("Resources");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("StudentsFirst.Common.Models.AssignmentSubmission", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
